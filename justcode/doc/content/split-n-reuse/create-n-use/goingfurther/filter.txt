this::
    date = 2022-09-04


abrev::
    exafilter = ¨exatempl/filter


=====================================
Transformer des valeurs de paramètres
=====================================

¨jinja propose le concept de "filtre" pour modifier une valeur dans un squelette
((
    L'emploi de tel filtre doit être mûrement réfléchi !
)).
Par exemple
((
    Cet exemple est des plus mauvais, mais nous allons explorer un cas plus pertinent juste après.
)),
si python::``name = "WaRRioR"``, alors jinja::``"Hello {{ name | title }}!"`` sera transformé en verb::``Hello Warrior!`` suite à l'utilisation de la fonction "filtre" python::``title`` (qui vient de ¨python directement).
¨justcode, tout comme ¨cookiecutter, permet l'utilisation de filtres "maison" comme nous allons le voir dans cette section.


Considérons le squelette de fichier suivant où le paramètre python::``author`` doit être donné au format jinja::``Prénom NOM [adresse_de_courriel]``.
Les textes attendus pour les valeurs filtrées jinja::``{{author | fullname}}`` et jinja::``{{author | justemail}}`` sont immédiats à deviner.

jinja::
    ---
    path = ¨exafilter/description.md
    ---


Par exemple, si python::``author = Christophe BAL [projetmbc@gmail.com]`` , on veut obtenir le fichier ci-après.

markdown::
    ---
    path = ¨exafilter/description-filled.md
    ---


Les filtres "maison" python::``fullname`` et python::``justemail`` sont à implémenter en ¨python dans un module path::``filters`` placé dans le dossier path::``__jscmeta__`` destiné à ¨justcode.
Nous vous conseillons d'utiliser un fichier ¨python par filtre en utilisant le même nom pour le fichier et le filtre. Dans notre cas, nous utilisons donc la structure suivante pour construire un squelette path::``filtersinaction`` de ¨demo des filtres
((
    Pas besoin de fichier path::``specs.peuf`` ici.
)).

dirtree::
    ---
    path = ¨exafilter/dirtree.txt
    ---


Le fichier path::``__init__.py`` peut être vide. Quant aux deux autres fichiers leurs contenus est assez simple. Commençons par path::``fullname.py``.

python::
    ---
    path = ¨exafilter/fullname.py
    ---


Dans ce code, on note l'usage de deux fonctions proposés par ¨justcode.

    1) La fonction python::``newfilter`` est à employer pour décorer le filtre "maison".

    1) La fonction python::``testfilter`` sert à tester en situation réelle le filtre lors de son implémentation.


Le fichier path::``justemail.py`` donné ci-dessous est maintenant immédiat à décrypter.

python::
    ---
    path = ¨exafilter/justemail.py
    ---
