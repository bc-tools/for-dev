this::
    date = 2022-10-03


abrev::
    currentstep = ¨exatempl/steps/final
    examono     = ¨exatempl/monorepo


======================================================================
Un squelette avec des règles ¨gitignore, et composé de sous-squelettes
======================================================================

L'agrégation de plusieurs squelettes pour en former un nouveau est maintenant très simple à comprendre. Imaginons que la structure suivante de type dépôt "unique" soit souvent utilisée.

dirtree::
    ---
    path = ¨exadir/mathobj-no-project.txt
    ---


Il est alors utile de créer, puis d'utiliser, un squelette que nous nommerons path::``monorepo`` à l'aide de squelettes existants.
Voici les étapes à suivre.

    1) On crée le dossier suivant supposé stocké à l'emplacement path::``~/mes_squelettes/monorepo``.

    dirtree::
        ---
        path = ¨examono/dirtree.txt
        ---

    1) L'importation de squelettes pour notre nouveau squelette se fait très simplement dans le fichier path::``specs.peuf`` comme suit.

    peuf::
        ---
        path = ¨examono/specs.peuf
        ---

    1) On crée le dossier minimaliste suivant avant de lancer l'initialisation.

    dirtree::
        ---
        path = ¨currentstep/dirtree.txt
        ---

    Dans ce dossier, l'unique fichier path::``params.peuf`` possède le contenu ci-après indiquant d'utiliser un squelette sur notre dossier, et non sur un sous-dossier, via la clé peuf::``template`` du sous-bloc peuf::``main::...``.
    En plus des ¨params attendus, des règles ¨gitignore sont aussi indiquées
    ((
        Des règles ¨gitignore ne sont applicables que sur tout un projet, et non sur des sous-dossiers.
        Ceci explique l'usage du bloc peuf::``main::...`` pour l'ajout de telles règles.
    )),
    on en reparle tout de suite après.

    peuf::
        ---
        path = ¨currentstep/params.peuf
        ---

    Les règles ¨gitignore à ajouter s'indiquent de la façon suivante
    ((
        Nous ne parlons pas ici la possibilté de retirer des règles. Ce sujet est abordé dans cf::``?/goingfurther/ignore-gitignore.txt``.
    )).

        * Il faut donner un ou des ¨enss de règles via peuf::``gitignore = ...``.
        Les différents ¨enss sont séparés par des points-virgules.

        * Un ¨ens de règles peut soit être l'un de ceux proposés par ¨justcode comme c'est le cas pour peuf::``python`` et peuf::``macos`` ci-dessus, soit directement fourni via un fichier comme path::``~/mes_gitignores/reglesmaison.txt`` dans notre exemple (ceci permet de travailler avec des règles "maison").

        * Au final, toutes les règles sont mises dans un unique fichier path::``gitignore`` en étant réorganiser de façon la plus optimale possible.

    1) Il ne reste plus qu'à lancer la génération comme cela a été expliqué à la fin de cf::``steps/1-single[CHANGES].txt``.


note::
    Il est bien entendu possible de définir des ¨params globalement pour éviter certaines redondances : voir la section cf::``?/goingfurther/global.txt`` (tout se passe dans le bloc peuf::``main::...`` très simplement).
