this::
    date = 2022-10-16


abrev::
    currentstep = ¨exatempl/steps/final
    examono     = ¨exatempl/monorepo


======================================================================
Un squelette composé de sous-squelettes, et avec des règles ¨gitignore
======================================================================

L'agrégation de plusieurs squelettes pour en former un nouveau est maintenant très simple à comprendre. Imaginons que la structure suivante de type dépôt "unique" soit souvent utilisée.

dirtree::
    ---
    path = ¨exadir/mathobj-no-project.txt
    ---


Il est alors utile de créer, puis d'utiliser, un squelette que nous nommerons path::``monorepo`` à l'aide de squelettes existants.


Commençons par la ¨def du squelette.

    1) On crée le dossier suivant supposé stocké à l'emplacement path::``~/mes_squelettes/monorepo``. Certains fichiers ont été ajoutés car ils sont spécifiques au squelette, et non à ceux qui vont être utilisés.

    dirtree::
        ---
        path = ¨examono/dirtree.txt
        ---

    1) L'importation de squelettes existants par notre nouveau squelette se fait très simplement via le fichier path::``specs.peuf`` comme suit.

    peuf::
        ---
        path = ¨examono/specs.peuf
        ---


Passons maintenant à l'utilisation de notre squelette path::``monorepo``.

    1) On commence par créer le dossier minimaliste suivant avant de lancer l'initialisation.

    dirtree::
        ---
        path = ¨currentstep/dirtree.txt
        ---

    Dans le dossier path::``__jscmeta__``, l'unique fichier path::``params.peuf`` possède le contenu ci-après qui va être expliqué dans les points suivants.

    peuf::
        ---
        path = ¨currentstep/params.peuf
        ---

    1) La clé peuf::``template`` du bloc peuf::``main::...`` sert à indiquer l'utilisation sur notre dossier principal du squelette stocké à l'emplacement path::``~/mes_squelettes/monorepo``.

    1) Via peuf::``remove = readme``, nous ignorons le sous-squelette path::``readme`` utilisé par path::``monorepo``
    ((
        Est-ce utile ?
    )).

    1) Ensuite, en plus des ¨params attendus par path::``monorepo``, il est possible d'indiquer des règles ¨gitignore
    ((
        L'usage veut que des règles ¨gitignore soient appliquées sur tout un projet, et non sur des sous-dossiers, mais ceci n'est pas une limitation de ¨git.
        ¨justcode respecte cette convention, et ceci explique l'usage du bloc peuf::``main::...`` pour l'ajout de telles règles.
    ))
    de la façon suivante
    ((
        Nous ne parlons pas ici la possibilté de retirer des règles. Ce sujet est abordé dans cf::``?/goingfurther/ignore-gitignore.txt``.
    )).

        * Il faut donner un ou des ¨enss de règles via peuf::``gitignore = ...``.
        Les différents ¨enss sont séparés par des points-virgules, et non des virgules.

        * Un ¨ens de règles peut soit être l'un de ceux proposés par ¨justcode comme c'est le cas pour peuf::``python`` et peuf::``macos`` ci-dessus, soit directement fourni via un fichier comme path::``~/mes_gitignores/reglesmaison.txt`` dans notre exemple (ceci permet de travailler avec des règles "maison").

        * Au final, toutes les règles sont mises dans un unique fichier path::``gitignore`` en étant réorganiser de façon la plus optimale possible.

    1) Il ne reste plus qu'à lancer la génération comme cela a été expliqué à la fin de cf::``1-single[CHANGES].txt``.


tip::
    Pour fabriquer des fichiers ¨gitignore, l'emploi de terminal::``git check-ignore -v`` est très utile. Voici deux cas possibles d'utilisation.

        1) terminal::``git check-ignore -v un/chemin/teste`` indique si le chemin path::``un/chemin/teste`` est à ignorer, et si c'est le cas, la règle éliminante est indiquée.
        Pas besoin de fournir le chemin d'un dossier, ou d'un fichier existant.

        1) On peut travailler sur le dossier courant via terminal::``git check-ignore -v **/*`` qui va afficher tous les fichiers ignorés, et à chaque fois la règle qui a conduit à cette élimination.


note::
    Il est bien entendu possible de définir des ¨params globalement pour éviter certaines redondances : voir la section cf::``?/goingfurther/global.txt`` (tout se passe dans le bloc peuf::``main::...`` très simplement).
