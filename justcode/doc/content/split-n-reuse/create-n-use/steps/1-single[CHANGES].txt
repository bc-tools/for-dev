this::
    date = 2022-10-18


abrev::
    currentstep = ¨exatempl/steps/1
    exachges    = ¨exatempl/changes


================================================
Un ¨1er patron avec une ¨lic - Le cas des ¨chgts
================================================

Commençons par voir comment définir un patron minimaliste, et paramétrable, pour le dossier des ¨chgts des projets ¨cvnum et ¨mathobj
((
    En réalité, ces projets utilisent une version compatible avec le projet ¨tnschges via un patron proposé directement par ¨justcode. Nous reparlerons de ceci plus tard...
)).

dirtree::
    ---
    path = ¨exachges/dirtree.txt
    ---


Expliquons le contenu du patron.

    1) Le fichier path::``x-todo-x.txt`` possède le contenu suivant où jinjang::``{{ project_name }}`` et jinjang::``{{ author_name }}`` sont des commandes ¨jinjang qui seront remplacées par le nom du projet à initier, et celui de l'auteur du projet.

    jinjang::
        ---
        path = ¨exachges/x-todo-x.txt
        ---

    Le ¨param jinjang::``project_name`` est un peu particulier car il est automatiquement associé au nom du dossier à initialiser.

    1) L'absence du fichier path::``LICENSE.txt`` vient de ce que l'ajout d'une licence est indiqué dans le fichier path::``specs.peuf`` du dossier path::``__jscmeta__``
    ((
        Le préfixe "jsc" est pour "Just Start (To) Code", soit ¨justcode.
    )),
    un dossier **optionnel** utilisé ici pour indiquer des métas ¨infos à ¨justcode via le fichier path::``specs.peuf``, ce dernier admettant le contenu suivant très court que nous allons expliquer juste après.

    peuf::
        ---
        path = ¨exachges/specs.peuf
        ---

    On constate la ¨def de deux ¨params qui vont être utilisés par le patron. Rappelons que le jinjang::``project_name`` est associé au nom du dossier à initialiser.

        * peuf::``author_name: str = ?`` utilise une syntaxe similaire à celle de ¨python pour indiquer que jinjang::``author_name`` est une chaîne de caractères
        ((
            ¨justcode dispose de ses propres types de ¨params qui n'ont rien à voir, ou presque, avec ceux de ¨python.
        )).
        Quant au point d'interrogation, il indique juste que ce ¨param devra être renseigné par l'utilisateur du patron. Tout autre chaîne sera considérée comme étant une valeur par défaut, rendant ainsi un ¨param optionnel.

        * La déclaration peuf::``license: lic = ?`` est similiare à la précédente si ce n'est qu'elle utilise le type peuf::``lic`` propre à ¨justcode pour la gestion des licences.


Il reste à voir comment initier un projet à partir de notre patron. Nous allons supposer que le chemin absolu du dossier définissant le patron est path::``~/mes_patrons/changes`` où path::``~`` est un raccourci pour le chemin du dossier de l'utilisateur principal. Pour initier le projet ¨cvnum, il faut suivre les étapes suivantes.

    1) On crée un dossier path::``cvnum`` avec le contenu minimaliste suivant.

    dirtree::
        ---
        path = ¨currentstep/dirtree.txt
        ---

    Le nom du projet, associé au ¨param jinjang::``project_name``, est automatiquement celui du dossier, soit ici ``cvnum``.

    Quant au fichier path::``params.peuf``, il permet d'indiquer un ou plusieurs patrons, ainsi que les ¨params attendus par chacun des patrons employés.
    Dans notre cas, ce fichier admet le contenu suivant où l'on donne un unique patron pour initier un sous-dossier de chemin path::``changes`` : voir peuf::``changes = ...`` dans le bloc peuf::``import::...``.

    peuf::
        ---
        path = ¨currentstep/params.peuf
        ---

    Noter que dans le bloc peuf::``changes::...`` est indiqué la licence "licence::``by nc sa 4.0``", une licence gérée par défaut par ¨justcode : voir cf::``?/api/licenses.txt``.

    1) Pour finir, on lance ¨justcode en ligne de commandes avec pour unique argument le chemin de notre dossier path::``cvnum``. Voilà, c'est tout pour l'utilisation !


info::
    Se reporter à cf::``?/cli.txt`` pour le mode d'emploi détaillé de ¨justcode en ligne de commandes.


Voici quelques précisions sur les chemins des dossiers initialisables via un patron.

    1) Les noms des dossiers où initier un squelette ne peuvent utiliser que des lettres latines non accentuées, des chiffres, le point ``.``, le ¨_ ``_``, et le signe ``-``.
    Ne portez pas plainte, ceci ne changera jamais.

    1) Il est interdit d'utiliser les noms des blocs spéciaux du mini-langage dans un fichier path::``__jscmeta__/params.peuf``, mais cette limitation est facilement contournable : par exemple, pour initier un squelette dans un dossier path::``import``, il suffit d'indiquer et utiliser le chemin peuf::``./import``.


tip::
    Pour utiliser un patron pour tout un projet, et non juste un sous-dossier, il suffit d'utiliser le bloc spécial peuf::``main::...``. Nous verrons ceci un peu plus tard.
