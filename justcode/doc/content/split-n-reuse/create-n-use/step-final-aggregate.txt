this::
    date = 2022-08-30


abrev::
    currentstep = ¨exatempl/step-final
    examono     = ¨exatempl/monorepo


=======================================
Un squelette composé de sous-squelettes
=======================================

L'agrégation de plusieurs squelettes pour en former un nouveau est maintenant très simple à comprendre. Imaginons que la structure suivante de type dépôt "unique" soit souvent utilisée.

dirtree::
    ---
    path = ¨exadir/mathobj-no-project.txt
    ---


Il est alors utile de créer, puis d'utiliser un squelette que nous nommerons path::``monorepo``. Voici les étapes à suivre.

    1) On crée le dossier suivant supposé stocké à l'emplacement path::``~/mes_squelettes/monorepo``.

    dirtree::
        ---
        path = ¨examono/dirtree.txt
        ---

    1) L'importation de squelettes pour notre nouveau squelette se fait très simplement dans le fichier path::``sepcs.peuf`` comme suit (on pourrait utiliser si besoin le bloc path::``gene::...`` pour des réglages généraux).

    peuf::
        ---
        path = ¨examono/specs.peuf
        ---

    1) On crée le dossier minimal suivant avant de lancer l'initialisation.

    dirtree::
        ---
        path = ¨currentstep/dir-mathobj.txt
        ---

    Dans ce dossier, l'unique fichier path::``justcode.peuf`` possède le contenu ci-après indiquant d'utiliser un squelette sur notre dossier, et non sur un sous-dossier, via le sous-bloc peuf::``main::...``.
    Des règles ¨gitignore sont aussi indiquées
    ((
        Des règles ¨gitignore ne sont aplicables que sur tout un projet, et non sur des sous-dossiers.
        Ceci explique l'usage du bloc peuf::``main::...`` pour l'ajout de telles règles.
    )),
    on en reparle juste après.

    peuf::
        ---
        path = ¨currentstep/justcode-mathobj.peuf
        ---

    Vous noterez la possibilité d'utiliser des règles disponibles directement, qui sont en fait fabriquées par cf::``https://www.gitignore.io``
    ((
        Ne pas hésiter à demander le support d'autres règles.
    )),
    ici ce sont les règles ``python`` et ``osx``.
    De plus, il est possible d'ajouter des règles "maison" en indiquant un fichier, ou plus.
    Au final, toutes les règles sont mises dans un unique fichier path::``.gitignore``.

    1) Il ne reste plus qu'à lancer la génération comme cela a été expliqué à la fin de cf::``step-1-single[CHANGES].txt``.
