this::
    date = 2022-10-11


=====================
Des contenus attendus
=====================

L'analyse de contenu est à l'initiative de l'auteur d'un squelette. Pour reprendre le cas du ¨2e projet path::``myproject_2``, nous cherchons à repérer les absences suivantes dans le fichier path::``myproject_2/changes/x-todo-x.txt``.

    1) L'absence des ``===`` autour de ``myproject`` au début du fichier.

    1) L'absence de la ligne ``VERSION = MAJOR.MINOR.PATCH``.


Pour obtenir ceci, le fichier path::``x-todo-x.txt`` du squelette comme suit. Ce code va être expliqué juste après.

peuf::
    ---
    path = ¨exatempl/validate/changes/specs.peuf
    ---


On utilise au tout début du fichier un commentaire ¨jinja un peu spécial au format jinja::``{### ... ###}`` dans lequel sont utilisées les directives suivantes.

    1) Tout se passe dans le bloc bien nommé peuf::``validate::...`` qui accepte deux types de sous-blocs.

    1) Le sous-bloc peuf::``lines::...`` sert à indiquer des lignes isolées devant aparaître quelque part dans un contenu.
    Ici on utilise juste regex::``VERSION = MAJOR\.MINOR\.PATCH`` où les contre-obliques regex::``\`` sont indispensables car ¨justcode travaille avec des ¨regexs (voir ce qui suit pour une précision très importante indiquant l'usage de ¨jinja avant de passer via une ¨regex).

    1) Le sous-bloc peuf::``blocks::...`` est pour plusieurs lignes. Notons deux choses importantes ici.

        * Avant de considérer avoir une ¨regex, ¨justcode fait appel à ¨jinja. Ceci permet de comprendre que jinja::``{{project_name}}`` sera remplacé par le nom du projet.

        * L'utilisation de regex::``^`` fait classiquement ¨ref au début du fichier.


Une fois le squelette complété, la validation attendue sera effectuée en lançant de ¨justcode avec l'option terminal::``--validate``, et pour argument le chemin du dossier path::``myproject_2``.
