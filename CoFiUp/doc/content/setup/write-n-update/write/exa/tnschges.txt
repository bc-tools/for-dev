this::
    date = 2023-01-25


================================
Un exemple pour mieux comprendre
================================

Dans le mono-dépôt ¨monorepo_fordev accueillant ¨cofiup, chaque projet indique ses ¨chgts mois par mois dans un dossier path::``changes`` utilisant une structure comme celle de l'exemple fictif suivant.

dirtree::
    + fictive-project
        + changes
            + 2022
                * 03.txt
                * 09.txt
            + 2023
                * 01.txt

        + [...]


Dans chaque fichier, les ¨numsver sont datés au jour près, et indiqués comme suit.

tnschges::
    ---
    title = Contenu fictif du fichier path::``changes/2022/03.txt``
    ---

    ==
    13  (0.1.2-rc)
    ==

    Bla, bla...


    ==
    10
    ==

    Blo, blo...


    // ---------- //


    ==
    09  (0.1.1-rc)
    ==

    Bli, bli...


Voyons comment extraire les dates et les ¨numsver dans les fichiers utilisés. Ceci se passe comme suit via le bloc yaml::``search``.
Si vous êtes familier des ¨regexs_FR, vous constaterez la simplicité de ce qui suit où les valeurs capturées sont associées aux noms internes yaml::``year``, yaml::``month``, yaml::``date`` et yaml::``version``.
Par contre, si vous pensez que la phrase précédente ne peut pas avoir été écrite par un humain
((
    L'auteur de ¨cofiup est conscient que la simple évocation du concept de "¨regexs_FR" peut faire fuire certains développeurs. Ceci étant noté, l'emploi d'¨regexs_FR est la seule façon efficace, et flexible de rendre ¨cofiup utile.
)),
des explications détaillées sont données juste après.

yaml::
    search:
        - tnschges:
            - 'changes/(?P<year>\d{4})/(?P<month>\d{2})\.txt'
            - '^={2,}\n(?P<day>\d{2})[ \t]*\((?P<version>.*)\)\n={2,}\n'


Avec la ¨1iere règle, ¨cofiup analysera par exemple les fichiers de chemins path::``changes/2022/03.txt``, et path::``changes/2023/01.txt``, et pour chacun de ces fichiers, les couples de ¨nbres `(year, month)` capturés, pour un usage ultérieur, seront `(2022, 03)` et `(2023, 01)`. Le site ¨regexkit donne les explications détaillées suivantes, après traduction en français.

verbatim::
    ---
    title = Comprendre regex::``changes/(?P<year>\d{4})/(?P<month>\d{2})\.txt``
    ---

    changes/ correspond aux caractères changes/ littéralement
             (sensible à la casse)

    (?P<year>\d{4}) correspond à un groupe de capture nommé year
        \d{4} correspond à un chiffre [0-9].
              Quantificateur : {4} Exactement 4 fois

    / correspond au caractère / littéralement

    (?P<month>\d{2}) correspond à un groupe de capture nommé month
        \d{2} correspond à un chiffre [0-9].
              Quantificateur : {2} Exactement 2 fois

    \. correspond au caractère . littéralement

    txt correspond aux caractères txt littéralement
        (sensible à la casse)


info::
    Pour les chemins de fichiers, le caractère ``/`` est le "séparateur de dossier", y compris pour le ¨os_FR ¨winOS. Ceci permet en coulisse de rechercher efficacement les fichiers à analyser.


Pour extraire des ¨infos dans les fichiers analysés, la ¨2nde ¨regex_FR indique de repérer dans le code fictif donné plus haut les ¨numsver version::``0.1.1-rc`` et version::``0.1.2-rc``, tout en les associant aux numéros de jour verb::``09`` et verb::``13``.
De nouveau, le site ¨regexkit peut être utilisé pour obtenir les explications suivantes, après traduction en français.

verbatim::
    ---
    title = Comprendre regex::``^={2,}\n(?P<day>\d{2})[ \t]*\((?P<version>.*)\)\n={2,}\n``
    ---

    ^ correspond à la position au début de la chaîne
      [[non, c'est un début de ligne]]

    ={2,} correspond au caractère = littéralement
          Quantificateur : {2,} Entre 2 et un nombre illimité de fois,
          autant de fois que possible, en rendant la pareille si
          nécessaire [gourmand].

    \n correspond à un caractère de saut de ligne (ASCII 10)

    (?P<day>\d{2}) correspond à un groupe de capture nommé day
        \d{2} correspond à un chiffre [0-9].
              Quantificateur : {2} Exactement 2 fois

    [ \t]* correspond à un seul caractère présent dans la liste
           ci-dessous
           Quantificateur : * Entre zéro et un nombre illimité de fois,
           autant de fois que possible, en rendant au besoin [gourmand].
           le caractère littéral
           [[sur le site, on visualise un espace]]
           \t Tab (ASCII 9)

    \( correspond au caractère ( littéralement

    (?P<version>.*) correspond à un groupe de capture nommé version
        .* correspond à n'importe quel caractère (sauf le saut de ligne)
           Quantificateur : * Entre zéro et un nombre illimité de fois,
           autant de fois que possible, en rendant ce qui est nécessaire
           [gourmand].

    \) correspond au caractère ) littéralement

    \n correspond à un caractère de saut de ligne (ASCII 10)

    ={2,} correspond au caractère = littéral
          Quantificateur : {2,} Entre 2 et un nombre illimité de fois,
          autant de fois que possible, en rendant ce qui est nécessaire
          [gourmand].

    \n correspond à un saut de ligne (ASCII 10).


info::
    Dans la section suivante cf::``?/update.txt``, nous verrons comment les valeurs sont stockées en interne. Ceci permettra de comprendre, par exemple, comment utiliser la version la plus récente pour modifier du contenu.
