this::
    date = 2023-02-12


abrev::
    examples = ?/examples/about2pyproj


===========================
Avec des valeurs identiques
===========================

Considérons le fichier ¨yaml suivant qui décrit le projet ¨cofiup de façon humaine, mais aussi informatiquement utilisable. Ce fichier est mis à jour manuellement par le développeur.

yaml::
    ---
    title = Le fichier path::``about.yaml`` de ¨cofiup
    path  = ¨examples/about.yaml
    ---


Pour utiliser l'excellentissime ¨poetry, il faut aussi produire un fichier path::``pyproject.toml`` comme le suivant.

toml::
    ---
    title = Le fichier path::``pyproject.toml`` de ¨cofiup
    path  = ¨examples/pyproject.toml
    ---


Certaines clés ont des valeurs identiques.

    1) yaml::``desc`` dans path::``about.yaml`` correspond à toml::``description`` dans path::``pyproject.toml``.

    1) yaml::``repository`` et yaml::``authors`` dans path::``about.yaml`` sont aussi présents dans path::``pyproject.toml``.
    Notons que pour yaml::``authors``, on part d'une liste de textes pour mettre à jour une autre liste de textes, ceci sans avoir à itérer sur la liste d'auteurs (ce sujet sera abordé dans la section suivante).


Voyons comment indiquer à ¨cofiup de mettre à jour, de façon semi-automatisée, les valeurs des clés "communes" de path::``about.yaml`` vers path::``pyproject.toml``.
Pour ce faire, il suffit d'utiliser le fichier de ¨cfg suivant, puis ensuite d'utiliser une ligne de commandes, ou un petit script ¨python (deux sujets qui seront abordés plus tard).
Nous supposons ici que le fichier de ¨cfg et les deux fichiers de données présentés ci-dessus sont tous dans le même dossier.

cofiup::
    ---
    title = Le fichier path::``cfg.cfup.yaml``
    path  = ¨examples/cfg.cfup.yaml
    ---


Ce fichier s'appuie sur les deux blocs cofiup::``data`` et cofiup::``update`` en suivant les règles suivantes.

    1) Le bloc cofiup::``data`` sert à indiquer des fichiers de données structurées du type ¨json, ¨toml ou ¨yaml.

        * Les règles définies doivent être nommées : ici, il y a juste la règle cofiup::``about``.

        * Vient ensuite le moyen de trouver le, ou les fichiers via un motif à la ¨unix, la recherche se faisant relativement au dossier du fichier de ¨cfg. Ici, cofiup::``path: about.yaml`` pointe juste vers le fichier ¨src.

        * Enfin le bloc cofiup::``keep`` permet d'indiquer des "chemins" de clés dont on veut récupérer la ¨val pour une utilisation ultérieure. Bien noter que l'on utilise une liste de spécifications, d'où les tirets.
        Ici, par exemple, nous avons la clé cofiup::``repository`` qui se trouve dans le sous-bloc cofiup::``sources`` du bloc cofiup::``general`` dans le fichier path::``about.yaml``.

    1) Le bloc cofiup::``update`` est organisé de façon similaire au bloc cofiup::``data``.

        * Pour la règle indiquée, de nom cofiup::``pyproject``, nous utilisons le sous-bloc cofiup::``data`` car le fichier à modifier est de type ¨json, ¨toml ou ¨yaml (nous ferons connaissance plus tard avec d'autres sous-blocs).

        * Vient alors cofiup::``path: pyproject.toml`` pour indiquer le fichier cible à modifier, de nouveau via un motif à la ¨unix relativement au dossier du fichier de ¨cfg.

        * Pour finir, les valeurs à modifier sont indiquées dans le bloc cofiup::``change`` via les "chemins" des clés concernées en utilisant une liste de spécifications mimant la ¨struc du fichier cible. Indiquons deux particularités.

            i) cofiup::``description = desc`` indique que la valeur de la clè ciblée cofiup::``description`` est égale à la valeur de la clé cofiup::``desc`` du fichier ¨src.

            i) cofiup::``repository`` est un raccourci très pratique pour cofiup::``repository = repository``.


info::
    Pour garder absoluement ¨ttes les données, il suffit de passer via yaml::``keep: *``.


Finissons avec deux fonctionnalités bien utiles.
Tout d'abord, il est possible d'employer une notation "pointée" limitant le ¨nbre de lignes tapées, voir cofiup::``tool.poetry`` et cofiup::``general.sources`` ci-dessous : un point correspond à l'ouverture d'un bloc.
De plus, il est possible de définir des alias pour les données "¨srcs" comme dans cofiup::``desc @ dt_desc`` ci-après, l'alias étant ici cofiup::``dt_desc``
((
    Le cofiup::``dt`` est pour "data".
)).
Retenir que cofiup::``@`` vient de "@-lias".

cofiup::
    ---
    title = Le fichier path::``cfg-alias.cfup.yaml``
    path  = ¨examples/cfg-alias.cfup.yaml
    ---


warning::
    Ce que nous venons de voir est immédiat à mettre en place car les valeurs communiquées du fichier ¨src au fichier cible sont du même type.


info::
    En interne, ¨cofiup stocke les données extraites via le bloc cofiup::``data`` d'une façon similiaire à celles manipulées en utilisant des ¨dicts, des listes, ¨etou juste des "chaînes de caractères" ¨python (pas de nombres, pas de dates, ...).


info::
    Nous verrons dans cf::``?/textual/template/extract.txt`` la possibilité de choisir des fichiers tout en extrayant des ¨infos dans les chemins de tels fichiers.
    Ceci peut aussi être mixé avec ce qui vient d'être vu : voir cf::``?/mixing.txt`` à ce sujet.
