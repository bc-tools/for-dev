this::
    date = 2023-01-????


=======================
D'un fichier à un autre    FAKE EXAMPLE !
=======================

Considérons le fichier ¨yaml suivant qui décrit le projet ¨cofiup de façon humaine, mais aussi informatiquement utilisable.

yaml::
    ---
    title = Le fichir path::``about.yaml`` de ¨cofiup
    path  = ?/examples/about2pyproj-nohandler/about.yaml
    keep  = regex: (?P<code>.*)\n{2}
    ---


La ¨desc du projet indiquée via yaml::``desc : ...`` sert aussi à décrire le projet dans le fichier path::``pyproject.toml`` qui admet le contenu suivant. Noter l'utilisation de toml::``description = '...'`` dans ce fichier.

toml::
    ---
    title = Le fichir path::``pyproject.toml`` de ¨cofiup
    path  = ?/examples/about2pyproj-nohandler/pyproject.toml
    keep  = regex: (?P<code>.*)\n{2}
    ---


Comment faire en sorte que la ¨maj de la ¨desc dans path::``about.yaml`` soit répercutée de façon automatisée dans path::``pyproject.toml`` ?
Via ¨cofiup, il suffit d'utiliser le fichier de ¨cfg suivant, puis ensuite d'utiliser une ligne de commandes, ou un petit script ¨python (deux sujets qui seront abordés plus tard).
Nous supposons ici que le fichier de ¨cfg et les deux fichiers de données présentés ci-dessus sont dans le même dossier.

yaml::
    # ----------------------- #
    # -- DONNÉES EXTRAITES -- #
    # ----------------------- #

    data:
        - about:
            - about\.yaml
            - keepas:
                - general:
                    - desc: mydesc

    # -------------------------- #
    # -- CE QUI EST ACTUALISÉ -- #
    # -------------------------- #

    update:
        - pyproject [data]:
            - pyproject\.toml
            - usefor:
                - tool:
                    - poetry:
                        - description: mydesc


Ce fichier est construit comme suit.

    1) Le bloc yaml::``data`` sert à indiquer des fichiers de données structurées du type ¨json, ¨toml ou ¨yaml.

        * On doit nommer les règles employées, ici seule la règle yaml::``about`` est définie.

        * On donne alors le moyen de trouver le, ou les fichiers via une ¨regex_FR. Ceci explique la nécessité d'échapper le point dans yaml::``about\.yaml``.

        * Enfin le bloc yaml::``keepas`` permet d'indiquer des "chemins" de clés dont on veut récupérer la ¨val pour une utilisation ultérieure.
        Ici nous avons la clé yaml::``desc`` qui se trouve dans le bloc yaml::``general`` du fichier path::``about.yaml``.
        De plus, nous définissions un alias yaml::``mydesc`` pour un usage "interne" (ceci est optionnel).

    1) Le bloc yaml::``update`` est organisé de façon similaire au bloc yaml::``data``.

        * Pour la règle indiquée, le nom yaml::``pyproject`` est suffixé de yaml::``[data]`` car c'est un fichier de données de type ¨json, ¨toml ou ¨yaml qui va être modifié.

        * Vient alors yaml::``pyproject\.toml`` pour indiquer le fichier à modifier.

        * Pour finir, une fois le "chemin" de la clé yaml::``description`` indiqué, nous lui associons yaml::``mydesc`` afin d'utiliser la valeur de cette clé "interne" définie dans le bloc yaml::``data``.


Il est possible d'employer une notation pointée limitant le ¨nbre de lignes tapées, un point correspondant à l'ouverture d'un bloc. Concrètement, le fichier précédent peut se taper comme suit.

yaml::
    data:
        - about:
            - about\.yaml
            - keepas:
                - general.desc: mydesc

    update:
        - pyproject [data]:
            - pyproject\.toml
            - usefor:
                - tool.poetry.description: mydesc


Il est aussi possible de ne pas indiquer d'alias comme ci-après. Noter que dans ce cas, pour le bloc yaml::``update``, il faut indiquer le moyen de retrouver la clé via le nom de la règle, soit ici yaml::``about``.

yaml::
    data:
        - about:
            - about\.yaml
            - keepas:
                - general.desc

    update:
        - pyproject [data]:
            - pyproject\.toml
            - usefor:
                - tool.poetry.description: about.general.desc


Pour finir, si l'on souhaite extraite un ¨ens complet de sous-clés, il suffit d'utiliser la valeur spéciale yaml::``*``.
Ci-dessous, nous gardons ¨ttes les clés du bloc yaml::``general``, aucune de ces clés n'ayant d'alias.

yaml::
    data:
        - about:
            - about\.yaml
            - keepas:
                - general: *


info::
    L'emploi de yaml::``keepas: *`` permet de garder absoluement ¨ttes les clés.
