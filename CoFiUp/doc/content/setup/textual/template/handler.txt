this::
    date = 2023-02-06


===============================
Obtenir des données utilisables
===============================

Les données extraites via le bloc cofiup::``search`` sont stockées dans une table ¨sqlite nommée sqlite::``dt_table``
((
    sqlite::``dt`` est pour "data".
))
ayant pour attributs sqlite::``year``, sqlite::``month``, sqlite::``day`` et sqlite::``version``.
L'utilisation directe de cette table, bien que possible, souffre des écueils suivants.

    1) La lecture des valeurs se fait en itérant sur une liste de ¨dicts, ¨cad en lisant la table ligne par ligne.

    1) L'ordre d'insertion des données dans la table n'étant pas pas prévisible, on ne maitrise pas l'ordre d'utilisation.

    1) Si plusieurs règles d'extraction sont utilisées, la table agrége ¨ttes les ¨vals : ceci peut vite rendre sqlite::``dt_table`` très "large".


Heureusement, grâce au bloc cofiup::``handler``, nous allons pouvoir fabriquer des données exploitables pour des ¨majs de fichiers. Voici ce que cela donne avec notre exemple fictif.

cofiup::
    ---
    title  = Extrait du fichier path::``config.cfp.yaml``
    path   = ¨examples/config.cfp.yaml
    from   = # -- PRÉ-GESTION BASIQUE DES DONNÉES CAPTURÉES -- #
    before = # -- CE QUI EST ACTUALISÉ -- #
    ---


Voici comment tout cela fonctionne.

    1) La donnée fabriquée cofiup::``last_version`` utilise deux mécanismes de fabrication, l'un via ¨sqlite, puis ensuite un second via ¨jinjang. L'ordre d'utilisation est ici essentiel comme nous allons le voir.

        * Le sous-bloc cofiup::``sql`` de cofiup::``last_version`` permet de manipuler de façon classique la table sqlite::``dt_table``. Ici, nous obtenons une liste de taille `1` contenant un dictionnaire donnant les ¨infos sur la version la plus ancienne
        ((
            La requête proposée est fragile car elle ne prend pas en compte les ¨numsver de type ¨semver. Voir à ce propos l'¨info donnée plus bas dans cette section.
        )).

        * Il reste à comprende comment fonctionne cofiup::``jinjang: "{{ last_version[0] }}"`` au sein du bloc cofiup::``last_version``. Pas d'auto-référence ici !
        En fait, ¨cofiup fabrique de ¨nelles données pas à pas, donc au moment de l'emploi du sous-bloc cofiup::``jinjang``, ¨cofiup a connaissance de la variable cofiup::``last_version`` obtenue juste avant via la requête ¨sqlite.
        Ceci permet ici de travailler par la suite avec un dictionnaire, et non une liste de taille `1`.

    1) Rien de nouveau à dire pour les blocs cofiup::``last_version_nb`` et cofiup::``last_version_date`` une fois que l'on a compris que cofiup::``last_version`` est un dictionnaire.


info::
    Via ¨python, il est possible d'ajouter des fonctions de tri "maison" pour personnaliser certaines requêtes ¨sqlite.
    Dans le cas de notre exemple, ceci permet de gérer les ¨numsver de type ¨semver ; par contre, ceci demande de passer via l'¨api ¨python.
