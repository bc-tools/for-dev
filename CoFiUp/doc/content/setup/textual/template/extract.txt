this::
    date = 2023-04-16


=====================================
Extractions des ¨numsver et des dates
=====================================

Pour indiquer à ¨cofiup comment extraire les dates et les ¨numsver dans les fichiers du dossier path::''changes'', il faut passer via le bloc cofiup::''search'' comme ci-après où nous cherchons aussi à capturer des ¨infos dans les chemins des fichiers annalysés : ceci explique l'emploi de cofiup::''regpath''. Sans ce besoin, on peut utiliser un motif de chemin à la ¨unix via la clé cofiup::''path''.
Noter qu'ici, du fait de la multiplivction des valeurs pour une même variable, le stockage des données extraites ne peut se faire que via une table d'une base de données : ce explique l'emploi de cofiup::''storein: database''. Ici la table aura pour attributs sql::''year'', sql::''month'', sql::''day'' et sql::''version'', et elle sera nommée sql::''tnschges''.

cofiup::
    ---
    title  = Extrait du fichier path::''cfg.cfup.yaml''
    path   = ¨examples/cfg.cfup.yaml
    before = # -- PRÉ-GESTION BASIQUE DES DONNÉES CAPTURÉES -- #
    ---


warning::
    Nous supposons ici que le fichier de ¨cfg se trouve à la racine du dossier du projet fictif.


Si vous êtes familier des ¨regexs_FR, vous constaterez la simplicité de ce qui précède : les valeurs capturées sont associées aux noms internes cofiup::''year'', cofiup::''month'', cofiup::''date'' et cofiup::''version''.
Par contre, si vous pensez que la phrase précédente ne peut pas avoir été écrite par un humain
((
    L'auteur de ¨cofiup est conscient que la simple évocation du concept de "¨regexs_FR" peut faire fuire certains développeurs. Ceci étant noté, l'emploi d'¨regexs_FR est la seule façon efficace, et flexible, de rendre ¨cofiup utile.
)),
des explications détaillées arrivent tout de suite.


Avec la ¨1ere règle pour repérer les fichiers à analyser, ¨cofiup analysera par exemple les fichiers de chemins path::''changes/2022/03.txt'', et path::''changes/2023/01.txt'', et pour chacun de ces fichiers, les couples de ¨nbres `(year, month)` capturés, pour un usage ultérieur, seront `(2022, 03)`, `(2022, 09)` et `(2023, 01)`.
Le site ¨regexkit donne les explications détaillées suivantes, après traduction en français.

verbatim::
    ---
    title = Comprendre regex::''changes/(?P<year>\d{4})/(?P<month>\d{2})\.txt''
    ---

    changes/ correspond aux caractères changes/ littéralement
             (sensible à la casse)

    (?P<year>\d{4}) correspond à un groupe de capture nommé year
        \d{4} correspond à un chiffre [0-9].
              Quantificateur : {4} Exactement 4 fois

    / correspond au caractère / littéralement

    (?P<month>\d{2}) correspond à un groupe de capture nommé month
        \d{2} correspond à un chiffre [0-9].
              Quantificateur : {2} Exactement 2 fois

    \. correspond au caractère . littéralement

    txt correspond aux caractères txt littéralement
        (sensible à la casse)


info::
    Pour les chemins de fichiers, le caractère ''/'' est le "séparateur de dossier", y compris pour le ¨os_FR ¨winOS. Ceci permet en coulisse de rechercher efficacement les fichiers à analyser.


Pour extraire des ¨infos dans les fichiers analysés, la ¨2nde ¨regex_FR indique de repérer les ¨numsver version::''0.1.1-rc'' et version::''0.1.2-rc'' dans le code fictif donné plus haut dans cf::''what.txt'', tout en les associant aux numéros de jour verb::''09'' et verb::''13''.
De nouveau, le site ¨regexkit peut être utilisé pour obtenir les explications suivantes, après traduction en français.

verbatim::
    ---
    title = Comprendre regex::''^={2,}\n(?P<day>\d{2})[ \t]*\((?P<version>.*)\)\n={2,}\n''
    ---

    ^ correspond à la position au début de la chaîne
      [[non, c'est un début de ligne]]

    ={2,} correspond au caractère = littéralement
          Quantificateur : {2,} Entre 2 et un nombre illimité de fois,
          autant de fois que possible, en rendant la pareille si
          nécessaire [gourmand].

    \n correspond à un caractère de saut de ligne (ASCII 10)

    (?P<day>\d{2}) correspond à un groupe de capture nommé day
        \d{2} correspond à un chiffre [0-9].
              Quantificateur : {2} Exactement 2 fois

    [ \t]* correspond à un seul caractère présent dans la liste
           ci-dessous
           Quantificateur : * Entre zéro et un nombre illimité de fois,
           autant de fois que possible, en rendant au besoin [gourmand].
           le caractère littéral
           [[sur le site, on visualise un espace]]
           \t Tab (ASCII 9)

    \( correspond au caractère ( littéralement

    (?P<version>.*) correspond à un groupe de capture nommé version
        .* correspond à n'importe quel caractère (sauf le saut de ligne)
           Quantificateur : * Entre zéro et un nombre illimité de fois,
           autant de fois que possible, en rendant ce qui est nécessaire
           [gourmand].

    \) correspond au caractère ) littéralement

    \n correspond à un caractère de saut de ligne (ASCII 10)

    ={2,} correspond au caractère = littéral
          Quantificateur : {2,} Entre 2 et un nombre illimité de fois,
          autant de fois que possible, en rendant ce qui est nécessaire
          [gourmand].

    \n correspond à un saut de ligne (ASCII 10).


info::
    Le ¨nbre de ¨regexs_FR de recherche, indiquées dans le bloc cofiup::''regex'', n'est pas limité (d'où l'usage d'une liste à la sauce ¨yaml).
