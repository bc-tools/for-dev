this::
    date = 2023-01-13


===========================
Des données au format ¨json
===========================

Une méthode sûre, en terme de sécurité, consiste à travailler avec deux fichiers du type suivant.

    1) Un fichier "patron" que l'on veut peupler.

    1) Un fichier au format ¨json associant des valeurs aux variables nécessaires au peuplement du fichier "patron".


note::
    Le format ¨json est supporté en lecture, et en écriture, par la majorité des ¨langs de ¨prog. Ceci permet d'envisager la fabrication de données de façon automatisée : voir à ce sujet la section cf::``?/jngcfg/hooks.txt`` pour apprendre à lancer des programmes extérieurs pour compléter le travail fait par ¨jinjang.

    Voir aussi la section cf::``python.txt`` qui explique comment fabriquer des données via ¨python.


Imaginons que nous soyons dans la situation suivante.

    1) Dans un dossier path::``my/folder`` se trouve un fichier "patron" path::``template.tex`` qui est de type ¨latex.

    1) Les données sont indiquées dans le fichier path::``data.json``.


Dans ce cas, pour créer un fichier inexistant path::``output.tex`` obtenu après peuplement, il suffira de procéder comme suit en retenant l'ordre "données-patron-produit" pour les fichiers (la sortie ¨jinjang a été omise d'où la présence de term::``[...]``).

terminal::
    > cd my/folder
    > jinjang data.json template.tex output.tex
    [...]


info::
    Nous laissons ici la responsabilité à ¨jinjang de trouver le bon "dialecte" à utiliser pour repérer les variables dans le "patron" : voir cf::``?/flavour.txt`` à ce sujet.


warning::
    Si le fichier path::``output.tex`` existe déjà, une erreur sera levée : cecei évite une moficiation non voulue suite à un erreur de saisie.
    Si vous souhaitez autoriser l'écrasement dun éventuel fichier path::``output.tex``, il faut passer via l'option term::``--erase``, ou term::``-e``, comme dans la commande term::``jinjang --erase data.json template.tex output.tex``.


A titre indicatif, montrons des contenus possibles pour les deux fichiers de départ suivis du fichier produit. Commençons par le "patron".

latex::
    ---
    title = Le "patron" path::``template.tex``
    path  = ?/examples/direct/template.tex
    ---


Les données suivantes sont utilisées pour peupler le "patron".

json::
    ---
    title = Les données dans path::``data.json``
    path  = ?/examples/direct/data.json
    ---


La commande term::``jinjang ...`` fournit finalement le fichier suivant.

latex::
    ---
    title = Le produit fini path::``output.tex``
    path  = ?/examples/direct/output.tex
    ---


note::
    La seule obtention du fichier path::``output.tex`` n'est pas forcément satisfaisante : on pourrait souhaiter obtenir aussi le ¨pdf fabriqué via l'appel de ¨pdflatex appliqué à path::``output.tex``.
    La section cf::``?/hooks.txt`` explique comment appeler des programmes extérieurs après le travail fait par ¨jinjnag.
