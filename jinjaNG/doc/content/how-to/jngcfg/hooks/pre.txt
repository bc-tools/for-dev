this::
    date = 2023-01-18


====================================
Agir avant l'utilisation du "patron"
====================================

Supposons que pour peupler un "patron", nous voulons obtenir le fichier suivant, ce dernier devant être fabriqué ¨auto^t à chaque lancement de ¨jinjang sur le "patron".

json::
    ---
    title = Le fichier path::``data.json``
    path  = ?/examples/hooks/pre/data.json
    ---


Pour la fabrication ¨auto, nous obtons pour le fichier ¨bash ci-après (qui ne nécessite aucun commentaire).

bash::
    ---
    title = Le fichier path::``bash2data.bash``
    path  = ?/examples/hooks/pre/bash2data.bash
    keep  = regex: # -- DOC CODE -- #(?P<code>[\n.]*)# -- FOR TESTING -- #
    trim  = yes
    ---


Soit depuis ¨python, voir cf::``?/python/config.txt``, soit en ligne de commandes, voir cf::``?/cli/config.txt``, on utilise ¨auto^t un fichier de ¨config path::``cfg.jng.yaml`` placé dans le même dossier que le fichier "patron". Ici, le contenu de ce fichier de ¨cfg est le suivant (la ligne avec term::``echo``, qui produira un affichage, est juste là pour expliquer le comportement de ¨jinjang).

yaml::
    ---
    title = Le fichier de ¨config path::``cfg.jng.yaml``
    path  = ?/examples/hooks/pre/cfg.jng.yaml
    ---


Le contenu précédent est analysé comme suit par ¨jinjang.

    1) Le bloc yaml::``pre`` dans le bloc yaml::``hooks`` indique des commandes de pré-traitements.

    1) Les commandes sont listées dans leur ordre d'utilisation.

    1) Chaque commande est lancée relativement au dossier du "patron" utilisé. Ceci permet de comprendre la simplicté du fichier ¨bash proposé plus haut qui n'utilise pas term::``cd``.


info::
    Pour cacher les sorties des commandes lancées en pré-trairement, il suffit d'employer l'option term::``--short``, ou term::``-s``.


info::
    Dans cf::``spevars.txt`` se trouvent des variables spéciales disponibles pour faciliter la définition de certaines commandes dans un fichier de ¨cfg.
