this::
    date = 2022-12-16


====================================
Agir avant l'utilisation du "patron"
====================================

Supposons que pour peupler un "patron", nous voulons obtenir le fichier suivant, ce dernier devant être fabriqué ¨auto^t à chaque lancement de ¨jinjang sur le "patron".

json::
    ---
    title = Le fichier path::``lastchanges.json``
    path  = ?/examples/hooks/pre/lastchanges.json
    ---


Pour la fabrication ¨auto, nous obtons pour le fichier ¨bash ci-après (qui ne nécessite aucun commentaire).

bash::
    ---
    title = Le fichier path::``bash2datas.bash``
    path  = ?/examples/hooks/pre/bash2datas.bash
    ---


Il reste à voir comment demander à ¨jinjang de lancer le script ¨bash.
Commençons par une méthode ne nécessitant aucune option lors de l'emploi de term::``python -m jinjang``.
Pour cela, il suffit d'utiliser un fichier nommé path::``cfg.jng.yaml``, placé dans le même dossier que le fichier "patron", et ayant le contenu suivant (la ligne avec term::``echo``, qui demande juste un affichage, est juste là pour expliquer le comportement de ¨jinjang).

yaml::
    ---
    title = Le fichier de ¨config path::``cfg.jng.yaml``
    path  = ?/examples/hooks/pre/cfg.jng.yaml
    ---


Le contenu précédent est analysé comme suit par ¨jinjang.

    1) Le bloc yaml::``pre`` dans le bloc yaml::``hooks`` indique des commandes de pré-traitements.

    1) Les commandes sont listées dans leur ordre d'utilisation.

    1) Chaque commande est lancée relativement au dossier du "patron" utilisé. Ceci permet de comprendre la simplicté du fichier ¨bash proposé plus haut qui n'utilise pas term::``cd``.


info::
    Via l'option term::``-nocfg``, il est possible d'interdire l'utilisation ¨auto du fichier path::``cfg.jng.yaml``.


Si plusieurs "patrons" sont présents dans un même dossier, ou bien pour pouvoir utiliser des ¨configs de test, il est utile de pouvoir choisir le fichier de ¨config de façon explicite.
Ceci se passe via l'option term::``-cfg`` comme dans term::``python -m jinjang -cfg myconfig.yaml -dto ...``.


info::
    Il est possible d'utiliser quelques variables spéciales relatives au "patron" : voir cf::``spevars`` pour en savoir plus.
