this::
    date = 2023-01-18


================================
Un exemple pour mieux comprendre
================================

Imaginons que nous souhaitions développer un projet nommé ``the-project`` ayant la structure suivante où le dossier path::``src/changes`` doit contenir des ¨infos non ¨techs sur les versions mineures et majeures, hors "prelease". Ces explications sont à placer dans des fichiers de chemin du type path::``src/changes/year/month/day.txt`` faisant référence à la date de la version expliquée.

dirtree::
    + the-project
        + changes [...]
        + src
            + changes
                + 2022
                    + 12
                        * 05.txt
                        * 21.txt
                + 2023
                    + 01
                        * 17.txt
            + [...]
        + [...]


¨suaver associe une date à un ¨numver via la connaissance de groupes de capture nommés regex::``year``, regex::``month``, et regex::``day``, et pour faire ¨ref à ces valeurs dans une valeur de type ¨regex_FR, il suffit d'employer ``{year}``, ``{month}``, et ``{day}`` comme suit. Noter l'échappement du point via regex::``\.`` car nous travaillons avec des ¨regexs_FR.

yaml::
    require:
        - changes-user:
            - ':minor:'
            - 'src/changes/{year}/{month}/{day}\.txt'


En coulisse, ce sont des "f-strings" ¨python qui sont employées pour injecter les bonnes valeurs dans yaml::``'src/changes/{year}/{month}/{day}\.txt'``, et ensuite le résultat est employé comme une ¨regex_FR.


Imaginons de plus que des lignes du type verbatim::``VERSION : 0.4.0`` doivent apparaître au moins une fois dans les fichiers visés. Pour ce faire, il suffit de procéder comme suit où regex::``^`` et regex::``$`` indiquent ¨resp le début et la fin d'une ligne.

yaml::
    require:
        - changes-user:
            - ':minor:'
            - 'src/changes/{year}/{month}/{day}\.txt'
            - '^VERSION : {version}$'
