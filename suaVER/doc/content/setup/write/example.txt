this::
    date = 2023-01-16


================================
Un exemple pour mieux comprendre
================================

warning::
    Dans l'exemple qui suit, nous allons voir que des ¨grpes de capture nommés sont utilisés. Afin de pouvoir associer une date à une version, il faut obligatoirement utiliser a minima les noms de ¨grpe ``day``, ``month``, ``year`` et ``version``.


Voici comment sont gérés les ¨numsver du mono-dépôt ¨monorepo_fordev accueillant ¨suaver. Si vous êtes familier des ¨regexs_FR, vous constaterez la simplicité de ce qui suit. Si vous pensez que la phrase précédente ne peut pas avoir été écrite par un humain
((
    L'auteur de ¨suaver est conscient que la simple évocation du concept de "¨regexs_FR" peut faire fuire certains développeurs.
)),
des explications détaillées sont données juste après.

yaml::
    search:
        - tnschges:
            - 'changes/(?P<year>\d{4})/(?P<month>\d{2})\.txt'
            - '\n?={2,}\n(?P<day>\d{2})[ \t]*\((?P<version>.*)\)[ \t]*\n={2,}\n?'


Des exemples de chemins de fichiers à analyser sont path::``changes/2022/12.txt``, ou encore path::``changes/2023/01.txt``. Pour ces chemins, les couples de ¨nbres `(year, month)` capturés, pour un usage ultérieur, `(2022, 12)` et `(2023, 01)`. Le site ¨regexkit donne les explications détaillées suivantes, après traduction en français.

verbatim::
    "changes/(?P<year>\d{4})/(?P<month>\d{2})\.txt"

        changes/ correspond aux caractères changes/ littéralement (sensible à la casse)

        (?P<year>\d{4}) correspond à un groupe de capture nommé year
            \d{4} correspond à un chiffre [0-9].
                Quantificateur : {4} Exactement 4 fois

        / correspond au caractère / littéralement

        (?P<month>\d{2}) Groupe de capture nommé month
            \d{2} correspond à un chiffre [0-9].
                Quantificateur : {2} Exactement 2 fois

        \. correspond au caractère . littéralement

        txt correspond aux caractères txt littéralement (sensible à la casse)


info::
    Pour les chemins de fichiers, le caractère ``/`` est le "séparateur de dossier", y compris pour le ¨os_FR ¨winOS. Ceci permet en coulisse de rechercher efficacement les fichiers à analyser.


Pour extraire des ¨infos dans les fichiers analysés, la ¨2nde ¨regex_FR indique de repérer dans le code fictif suivant les ¨numsver tnschges::``0.1.1-rc`` et tnschges::``0.1.2-rc``, mais aussi de capturer les numéros de jour tnschges::``09`` et tnschges::``13`` qui leur sont associés.

tnschges::
    ==
    13  (0.1.2-rc)
    ==

    Bla, bla...


    ==
    10
    ==

    Bla, bla...


    // ---------- //


    ==
    09  (0.1.1-rc)
    ==

    Bla, bla...


De nouveau, le site ¨regexkit peut être utilisé pour obtenir les explications suivantes, après traduction en français.

verbatim::
    "\n?={2,}\n(?P<day>\d{2})[ \t]*\((?P<version>.*)\)[ \t]*\n={2,}\n?"

        \n ? correspond à un caractère de saut de ligne (ASCII 10).
            Quantificateur : ? Entre zéro et une fois, autant de fois que possible, en rendant au besoin [gourmand].

        ={2,} correspond au caractère = littéralement
            Quantificateur : {2,} Entre 2 et un nombre illimité de fois, autant de fois que possible, en rendant la pareille si nécessaire [gourmand].

        \n correspond à un caractère de retour à la ligne (ASCII 10)

        (?P<day>\d{2}) Groupe de capture nommé day
            \d{2} correspond à un chiffre [0-9].
                Quantificateur : {2} Exactement 2 fois

        [ \t]* correspond à un seul caractère présent dans la liste ci-dessous
            Quantificateur : * Entre zéro et un nombre illimité de fois, autant de fois que possible, en rendant au besoin [gourmand].
            le caractère littéral [[sur le site, on visualise un espace]]
            \t Tab (ASCII 9)

        \( correspond au caractère ( littéralement

        (?P<version>.*) Groupe de capture nommé version
            .* correspond à n'importe quel caractère (sauf le saut de ligne)
                Quantificateur : * Entre zéro et un nombre illimité de fois, autant de fois que possible, en rendant ce qui est nécessaire [gourmand].

        \) correspond au caractère ) littéralement

        [ \t]* correspond à un seul caractère présent dans la liste ci-dessous
            Quantificateur : * Entre zéro et un nombre illimité de fois, autant de fois que possible, en rendant au besoin [gourmand].
            le caractère littéral [[sur le site, on visualise un espace]]
            \t Tab (ASCII 9)

        \n correspond à un caractère de saut de ligne (ASCII 10)

        ={2,} correspond au caractère = littéral
            Quantificateur : {2,} Entre 2 et un nombre illimité de fois, autant de fois que possible, en rendant ce qui est nécessaire [gourmand].

        \n ? correspond à un caractère de saut de ligne (ASCII 10)
            Quantificateur : ? Entre zéro et une fois, autant de fois que possible, en restituant si nécessaire [gourmand].


info::
    L'¨regex_FR regex::``(?P<version>.*)`` est volontairement très vague afin de pouvoir repérer des erreurs de saisie. Pour les ¨nbres associés aux dates, il a été estimé que les fautes de frappe étaient trop rares pour demander à ¨suaver de les repérer.
