======
suaVER - TODO
======


> ---------------------------- <

Spec YAML à adapter au nouveau CoFiUp

versions.yaml en minuscules !!!!!

2023-01-13: 0.1.2-rc
2023-01-11: 0.1.1-rc
2023-01-05: 0.1.0-rc
2022-12-27: 0.0.0-beta


ok au lieu de listes imposés qi deviennent employable si besoin


2023-01-13:
  - 0.1.2-rc
2023-01-11:
  - 0.1.1-rc
2023-01-05:
  - 0.1.0-rc
2022-12-27:
  - 0.0.0-beta



on peut aussi faire

2023-01:
  13: 0.1.2-rc
2023-01:
  11: 0.1.1-rc
2023-01:
  05: 0.1.0-rc
2022-12-27: 0.0.0-beta

voire

2023:
  01:
    13: 0.1.2-rc
    11: 0.1.1-rc
    05: 0.1.0-rc
2022-12-27: 0.0.0-beta


par défaut on construit car facile à lire par un humain

2023:
  01:
    13: 0.1.2-rc
    11: 0.1.1-rc
    05: 0.1.0-rc

2022:
  12:
    27: 0.0.0-beta




> ---------------------------- <

mini projet pour la partie écriture car principa partagé avec about

    ---> on travaille avec (regex-chemin [, regex-contenu]) avec contenu optionnel

    ---> outil qui indique les chemins concernés, avec un rapport détaillé

    ---> fait le remplacements demandés

    ---> yaml + en ligne commande aussi ok


> ---------------------------- <

validation yaml ???

    ---> https://pykwalify.readthedocs.io/en/master/basics.html


> ---------------------------- <

CLI

    ---> options

                -b  --build
                -c  --config
                -r  --report
                -s  --summary
                -u  --unsafe
                -v  --validate

    ---> suaver --build

    ---> suaver --build --config chemin/vers/config  --summary chemin/vers/VERSIONS.YAML

    si pas config et/ou yaml, on fait via choix par défaut

    ---> --validate (check pas possible cf config a cause des raccourcis) au lieu de --build va juste ananlyser sans action phyisque : besoin dasn ce ca d'un rapport de type HTML par exemple

    on passse via un dossier relatif au lieu de lancement mais usage de --report pour choix perso OK

    --> par défaut maj mais avec accord à cahque fois, sinon utiliser --unsafe


> ---------------------------- <

on reprend idée d'exemples inclus dans les tests unitaires


> ---------------------------- <

valider automatiquement specs de config python via ce qui est ibdiqué dans la doc du

    ---> full-specs.txt
