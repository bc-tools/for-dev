this::
    date = 2017-01-04


=====================================================================
Des clés "uniques" et leurs valeurs - Une lecture par bloc - Partie 2
=====================================================================

Les propriétés ``flatdict`` et ``treedict`` ont surtout une utilité pratique en interne pour la gestion du format ¨json. Il vous sera sûrement plus utile de travailler avec la méthode mydict que nous allons présentée ici.


Dans la suite, nous gardons toujours le même exemple que dans la partie avec le même chemin et toujours encodé en ``utf-8``.



Voici un ¨1ER exemple de code qui ne marchera pas avec des clés multiples (on parle de ceci dans cf::``/mutlikeyval.txt``).

python::
    from pprint import pprint

    from pathlib import Path
    from orpyste.data import ReadBlock

    with ReadBlock(
        content = Path("user/example.peuf"),
        mode    = "keyval:: ="
    ) as datas:
        onedict = datas.mydict(kind = "std")

        print(type(onedict))
        pprint(onedict)


Dans ``kind = "std"``, "std" est une abréviation de "standard" pour obtenir un dictionnaire ¨python standard comme on le vérifie ci-dessous.

term::
    <class 'dict'>
    {'joueur_1': {'age': {'nbline': 5, 'sep': '=', 'value': '24'},
              'alias': {'nbline': 8, 'sep': '=', 'value': 'Sonic'},
              'score': {'nbline': 7, 'sep': '=', 'value': '2007'},
              'sexe': {'nbline': 6, 'sep': '=', 'value': 'féminin'}},
    'joueur_2': {'age': {'nbline': 16, 'sep': '=', 'value': '18'},
              'alias': {'nbline': 19, 'sep': '=', 'value': 'Super Mario'},
              'score': {'nbline': 18, 'sep': '=', 'value': '1874'},
              'sexe': {'nbline': 17, 'sep': '=', 'value': 'masculin'}}}

Voici un autre exemple d'utilisation où seule les nouvelles lignes ont été indiquées.


python::
    [...]

    with ReadBlock(...) as datas:
        pprint(datas.mydict(kind = "tree std nosep nonb"))


Nous voilà bien heureux juste avec nos données (par contre, nous perdons toute possibilité d'indiquer finement des problèmes dans le fichier ¨peuf initial).

term::
    {'joueur_1': {'age': '24',
                  'alias': 'Sonic',
                  'score': '2007',
                  'sexe': 'féminin'},
     'joueur_2': {'age': '18',
                  'alias': 'Super Mario',
                  'score': '1874',
                  'sexe': 'masculin'}}


Voici les options disponibles pour l'argument ``kind`` sachant qu'il suffit de mettre ces options séparées par des esapces dans une chaîne de carcatères.

    1) Ici ce n'est pas utile mais dans le cas de blocs imbriqué, vous pouvez soit opter pour un structure plate via l'option ``"flat"``, soit choisir une structure arborescent pour votre dictionnaire via l'option ``"tree"``.

    2) Si vous souhaitez obtenir un dictionnaire ¨python standard, faites appel comme ci-dessus à l'option ``"std"``.

    3) Aux options précédentes s'ajoutent celles permettant de ne pas grader certaine ¨infos.

        * ``"nosep"`` demande de ne pas garder les séparateurs des clés et de leur valeur.

        * ``"nonb"`` permet de ne pas avoir le numéro de ligne où la clé a été indiqué dans le fichier ¨peuf.

        * ``"noval"`` ne garde pas la trace des valeurs (est-ce utile ?).
