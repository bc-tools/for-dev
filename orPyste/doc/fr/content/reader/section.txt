this::
    date = 2017-07-30


============================================================
Sections pour agréger différents "fichiers" ¨peuf dans un seul
============================================================

Parfois on peut avoir besoin d'utiliser une seule chaîne de caractères, ou bien un seul fichier pour indiquer différentes données qui devraient situées dans différentes chaînes ou fichiers au vue des spécifications données jusqu'à présent.
En fait, ¨orpyste offre le concept de sections pour agréger différents "fichiers" ¨peuf dans un seul. Ceci est assez simple. Voyons comment faire de suite via le fichier ¨peuf exemple ci-dessous où les sections sont indiquées entre deux lignes d'au moins deux signes ``=``.

orpyste::
    ==
    Section A
    ==
    donnees_1::
        a = 1

    // Un titre magnifique pour une section...
    =========
    Section B
    =========
    donnees_2::
        b = 2

    donnees_3::
        c = 3


Voici dès lors comment demander à ¨python de nous montrer les "querypaths" et les données "ligne par ligne" au format "rtu".

python::
    from orpyste.section import Read

    with ReadBlock(
        content = chmein_vers_le_fichier_peuf_precedent,
        mode    = "keyval:: ="
    ) as datas:
        for onedata in datas:
            if onedata.isblock():
                print('--- {0} ---'.format(onedata.querypath))

            elif onedata.isdata():
                print(onedata.rtu)


Lancé dans un terminal, le script ¨python précédent nous affiche ce qui suit.

term::
    --- <Section A>/donnees_1 ---
    (5, 'a', '=', '1')
    --- <Section B>/donnees_2 ---
    (11, 'b', '=', '2')
    --- <Section B>/donnees_3 ---
    (14, 'c', '=', '3')


Vous constatez que chaque section est indiquée à l'intérieur de ``<...>`` au début du "querypath". Ceci permet de trouver facilement une section. Ainsi si dans le fichier ¨python ci-dessus, nous utilisons ``for onedata in datas["<*B>**"]:...`` au lieu de ``for onedata in datas:...``, nous obtiendrons la sortie suivante.

term::
    --- <Section B>/donnees_2 ---
    (11, 'b', '=', '2')
    --- <Section B>/donnees_3 ---
    (14, 'c', '=', '3')
