this::
    date = 2017-01-04


=========================================
Des clés "répétables" et leurs valeurs...
=========================================

Voici le mini fichier ¨peuf de type clé-valeur où vous noterez l'utilisation répétée de la même clé ``A``.

orpyste::
    logique::
        A <==> B
        A ==> B
        A <== P


Nous supposons de nouveau que le fichier admet path::``user/example.peuf`` pour chemin complet, et le ``utf-8`` pour encodage. Dans le code suivant vous noterez l'utilisation de ``multikeyval`` pour autoriser que des clés soient utilisées plusieurs fois dans le même bloc (nous pouvons utiliser le raccourci ``mk`` au lieu de ``multikeyval``). C'est la seule nouveauté par rapport à la section précédente.

python::
    from pathlib import Path
    from pprint import pprint

    from orpyste.data import Read

    with Read(
        content = Path("user/example.peuf"),
        mode    = "multikeyval:: <==> ==> <=="
    ) as datas:
        for onedata in datas:
            if onedata.isblock():
                print('--- {0} ---'.format(onedata.querypath))

            elif onedata.isdata():
                pprint(onedata.rtu)


Lancé dans un terminal, le code précédent produit la sortie suivante où les quadruplets sont du type ``(numéro de ligne, clé, séparateur, valeur)``.

term::
    --- logique ---
    (3, 'A', '<==>', 'B')
    (4, 'A', '==>', 'B')
    (5, 'A', '<==', 'P')


On peut aussi faire appel à la classe ``ReadBlock`` comme suit.

python::
    from pathlib import Path
    from pprint import pprint

    from orpyste.data import ReadBlock

    with ReadBlock(
        content = Path("user/example.peuf"),
        mode    = "multikeyval:: <==> ==> <=="
    ) as datas:
        print(onedata.mydict("flat nonb"))


Dans un terminal, nous obtenons ce qui suit (avec un ¨mef à la main).

term::
    MKOrderedDict([
        (
            id=0, key='logique',
            value=MKOrderedDict([
                (id=0, key='A', value={'value': 'B', 'sep': '<==>'}),
                (id=1, key='A', value={'value': 'B', 'sep': '==>'}),
                (id=2, key='A', value={'value': 'P', 'sep': '<=='})
            ])
        )
    ])



warning::
    L'option ``"std"`` de la méthode ``mydict`` n'est plus utilisable ici.
