this::
    date = 2012-04-13


======
¨Intro
======

Le module ¨orpyste est né d'un besoin de rédiger rapidement des données simples et structurées pour des fichiers de configuration ainsi que pour des tests unitaires. Avant d'entrer dans les détails, voici un petit exemple de fichier ¨orpyste stockant des informations sur des joueurs. Désolé pour ce manque d'originalité...

orpyste::
    joueur_1::
        date  = 1985
        sexe  = masculin
        score = 18974
        alias = Super Mario

    joueur_2::
        date  = 1991
        sexe  = féminin
        score = 32007
        alias = Sonic


L'équivalent en ¨xml pourrait être le code suivant.

xml::
    <joueur_1 date="1985" sexe="masculin" score="18974" alias="Super Mario"/>

    <joueur_2 date="1991" sexe="féminin" score="32007" alias="Sonic"/>


Avec du code ¨json, on pourrait utiliser ce qui suit.

json::
    {
        "joueur_1": {
            "date": "1985",
            "sexe": "masculin",
            "score": "18974",
            "alias": "Super Mario",
        },
        "joueur_2": {
            "date": "1991",
            "sexe": "féminin",
            "score": "32007",
            "alias": "Sonic",
        }
    }


Les traductions ci-dessus permettent de se rendre compte de la rédaction économique employée par les fichiers gérés par le module ¨orpyste.


info::
    **D'où vient le nom du module ?** ¨orpyste est un anagramme de ``pyStore`` où "store" signifie "stocker" en anglais, et bien entendu "py" fait référence à "Python". Cet anagramme produit un très mauvais jeu de mots ayant un sens caché : ce mini-module utilise un système de fichier non usuel, en dehors des sentiers battus, ou aussi hors des pistes balisées.
