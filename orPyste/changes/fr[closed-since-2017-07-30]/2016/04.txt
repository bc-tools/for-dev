==========
2016-04-06
==========

**Intégration des "regpaths" de ``mistool.os_use`` :** pour faciliter l'utilisation de l'itérateur ``for`` des classes ``data.Read`` et ``data.ReadBlock``, on utilisera dorénavant la syntaxe des "regpaths" de ``mistool.os_use`` au lieu de celle des ¨regex_frs de ¨python. Côté code, ceci se fait directement via un "copier-coller" depuis ``mistool.os_use`` (de nouveau on cherche à éviter une dépendance exagérée vis à vis du module ¨mistool).


==========
2016-04-05
==========

**Intégration de la classe ``data.OrderedRecuDict`` depuis ``mistool.python_use`` :** ce sera dorénavant ``mistool.python_use`` qui fera éventuellement évoluer la classe ``OrderedRecuDict``. Grâce à ``inspect``, le code de ``data.OrderedRecuDict`` est obtenu directement via un "copier-coller" depuis ``mistool.python_use`` (ceci évite d'avoir une dépendance exagérée vis à vis du module ¨mistool).


==========
2016-04-04
==========

**Amélioration des méthodes ``flatdict`` et ``recudict`` de la classe ``data.ReadBlock`` :** l'argument ``nonbline`` a été supprimé. À la place, l'utilisateur pourra récupérer les numéros de lignes à l'aide de la méthode ``nblineof`` prenant en argument soit une liste de noms de blocs, soit un chemin d'accès à un bloc.


==========
2016-04-03
==========

**Amélioration de la classe ``data.ReadBlock`` :** voici les nouveautés.

    1) Renommage de la méthode ``dico`` en ``flatdict``.

    2) Ajout d'une méthode ``recudict`` qui est un dictionnaire reflétant la structure récursive du fichier ¨peuf analysé.


**Création de la classe ``data.OrderedRecuDict`` :** la méthode ``recudict`` utilise la nouvelle classe ``data.OrderedRecuDict`` afin de travailler facilement avec des dictionnaires utilisant au choix une clé "classique", ou une liste de clés "classiques".
